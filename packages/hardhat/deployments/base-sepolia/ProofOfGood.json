{
  "address": "0x33cf2681363b893219B7397C43fF45d5362638cA",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "agreementId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "AgreementCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "agreementId",
          "type": "uint256"
        }
      ],
      "name": "AgreementEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "agreementId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "AgreementJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "content",
          "type": "string"
        }
      ],
      "name": "ChallengeCommented",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProofOfGood.ChallengeType",
          "name": "challengeType",
          "type": "uint8"
        }
      ],
      "name": "ChallengeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "ChallengeEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "ChallengeJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liker",
          "type": "address"
        }
      ],
      "name": "ChallengeLiked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "subdomain",
          "type": "string"
        }
      ],
      "name": "ENSSubdomainAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proof",
          "type": "string"
        }
      ],
      "name": "ProofSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "verified",
          "type": "bool"
        }
      ],
      "name": "ProofVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "RewardsDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "follower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "followed",
          "type": "address"
        }
      ],
      "name": "UserFollowed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMUNITY_FUND_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PLATFORM_FEE_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERIFIER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToEnsSubdomain",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "agreements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "agreementEnded",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "subdomain",
          "type": "string"
        }
      ],
      "name": "assignENSSubdomain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "challengeComments",
      "outputs": [
        {
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "challengeLikes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "challengeLikesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "challenges",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "enum ProofOfGood.ChallengeType",
          "name": "challengeType",
          "type": "uint8"
        },
        {
          "internalType": "enum ProofOfGood.ChallengeStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxParticipants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "participantCount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "requiresFollow",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "winnersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerWinner",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "rewardsDistributed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        }
      ],
      "name": "commentOnChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityFund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "parties",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "verifiers",
          "type": "address[]"
        }
      ],
      "name": "createAgreement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "enum ProofOfGood.ChallengeType",
          "name": "challengeType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxParticipants",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "verifiers",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "requiresFollow",
          "type": "bool"
        }
      ],
      "name": "createChallenge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agreementId",
          "type": "uint256"
        }
      ],
      "name": "endAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "endChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "ensSubdomainToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userToFollow",
          "type": "address"
        }
      ],
      "name": "followUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "getChallenge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "enum ProofOfGood.ChallengeType",
          "name": "challengeType",
          "type": "uint8"
        },
        {
          "internalType": "enum ProofOfGood.ChallengeStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxParticipants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "participantCount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "verifiers",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "requiresFollow",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "winnersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerWinner",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "rewardsDistributed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "getChallengeComments",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "commenter",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct ProofOfGood.ChallengeComment[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "getChallengeParticipants",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "getParticipantStatus",
      "outputs": [
        {
          "internalType": "enum ProofOfGood.ParticipantStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "getProof",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "getProofStatus",
      "outputs": [
        {
          "internalType": "enum ProofOfGood.ProofStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalAgreements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalChallenges",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserProfile",
      "outputs": [
        {
          "internalType": "string",
          "name": "ensSubdomain",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalChallengesWon",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalChallengesParticipated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalWinnings",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isFirstTime",
          "type": "bool"
        },
        {
          "internalType": "address[]",
          "name": "followers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "follower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "followed",
          "type": "address"
        }
      ],
      "name": "isFollowing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agreementId",
          "type": "uint256"
        }
      ],
      "name": "joinAgreement",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "joinChallenge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "likeChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agreementId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "proof",
          "type": "string"
        }
      ],
      "name": "submitAgreementProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "proof",
          "type": "string"
        }
      ],
      "name": "submitProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userProfiles",
      "outputs": [
        {
          "internalType": "string",
          "name": "ensSubdomain",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalChallengesWon",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalChallengesParticipated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalWinnings",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isFirstTime",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agreementId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "name": "verifyAgreementProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "name": "verifyProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawCommunityFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe0220ff7f4c8d6254cb2d5d40472c7640b24aa793e762054cdb5c8876aa4e4de",
  "receipt": {
    "to": null,
    "from": "0x2DCc6F1Fe1d212aa6d8d424BE5D5A63737421bEd",
    "contractAddress": "0x33cf2681363b893219B7397C43fF45d5362638cA",
    "transactionIndex": 12,
    "gasUsed": "3644664",
    "logsBloom": "0x
    "blockHash": "0xd1de975b09f9b2bd42c5183647d8f2db9ee050bb7b45efeffe12d3204b362183",
    "transactionHash": "0xe0220ff7f4c8d6254cb2d5d40472c7640b24aa793e762054cdb5c8876aa4e4de",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 30675566,
        "transactionHash": "0xe0220ff7f4c8d6254cb2d5d40472c7640b24aa793e762054cdb5c8876aa4e4de",
        "address": "0x33cf2681363b893219B7397C43fF45d5362638cA",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002dcc6f1fe1d212aa6d8d424be5d5a63737421bed",
          "0x0000000000000000000000002dcc6f1fe1d212aa6d8d424be5d5a63737421bed"
        ],
        "data": "0x",
        "logIndex": 27,
        "blockHash": "0xd1de975b09f9b2bd42c5183647d8f2db9ee050bb7b45efeffe12d3204b362183"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 30675566,
        "transactionHash": "0xe0220ff7f4c8d6254cb2d5d40472c7640b24aa793e762054cdb5c8876aa4e4de",
        "address": "0x33cf2681363b893219B7397C43fF45d5362638cA",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x0000000000000000000000002dcc6f1fe1d212aa6d8d424be5d5a63737421bed",
          "0x0000000000000000000000002dcc6f1fe1d212aa6d8d424be5d5a63737421bed"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0xd1de975b09f9b2bd42c5183647d8f2db9ee050bb7b45efeffe12d3204b362183"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 30675566,
        "transactionHash": "0xe0220ff7f4c8d6254cb2d5d40472c7640b24aa793e762054cdb5c8876aa4e4de",
        "address": "0x33cf2681363b893219B7397C43fF45d5362638cA",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0ce23c3e399818cfee81a7ab0880f714e53d7672b08df0fa62f2843416e1ea09",
          "0x0000000000000000000000002dcc6f1fe1d212aa6d8d424be5d5a63737421bed",
          "0x0000000000000000000000002dcc6f1fe1d212aa6d8d424be5d5a63737421bed"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0xd1de975b09f9b2bd42c5183647d8f2db9ee050bb7b45efeffe12d3204b362183"
      }
    ],
    "blockNumber": 30675566,
    "cumulativeGasUsed": "5064521",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fa9b6b3c5b8f5adfe51df92ed6f57f7a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"agreementId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"agreementId\",\"type\":\"uint256\"}],\"name\":\"AgreementEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"agreementId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"AgreementJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"name\":\"ChallengeCommented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProofOfGood.ChallengeType\",\"name\":\"challengeType\",\"type\":\"uint8\"}],\"name\":\"ChallengeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"ChallengeEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"ChallengeJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liker\",\"type\":\"address\"}],\"name\":\"ChallengeLiked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"subdomain\",\"type\":\"string\"}],\"name\":\"ENSSubdomainAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"ProofSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"}],\"name\":\"ProofVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"follower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"followed\",\"type\":\"address\"}],\"name\":\"UserFollowed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMUNITY_FUND_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLATFORM_FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERIFIER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToEnsSubdomain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agreements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"agreementEnded\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"subdomain\",\"type\":\"string\"}],\"name\":\"assignENSSubdomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challengeComments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"challengeLikes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challengeLikesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challenges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"enum ProofOfGood.ChallengeType\",\"name\":\"challengeType\",\"type\":\"uint8\"},{\"internalType\":\"enum ProofOfGood.ChallengeStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participantCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"requiresFollow\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"winnersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerWinner\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rewardsDistributed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"name\":\"commentOnChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"parties\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"verifiers\",\"type\":\"address[]\"}],\"name\":\"createAgreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"enum ProofOfGood.ChallengeType\",\"name\":\"challengeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxParticipants\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"verifiers\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"requiresFollow\",\"type\":\"bool\"}],\"name\":\"createChallenge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementId\",\"type\":\"uint256\"}],\"name\":\"endAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"endChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"ensSubdomainToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userToFollow\",\"type\":\"address\"}],\"name\":\"followUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"getChallenge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"enum ProofOfGood.ChallengeType\",\"name\":\"challengeType\",\"type\":\"uint8\"},{\"internalType\":\"enum ProofOfGood.ChallengeStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participantCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"verifiers\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"requiresFollow\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"winnersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerWinner\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rewardsDistributed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"getChallengeComments\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct ProofOfGood.ChallengeComment[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"getChallengeParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getParticipantStatus\",\"outputs\":[{\"internalType\":\"enum ProofOfGood.ParticipantStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getProof\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getProofStatus\",\"outputs\":[{\"internalType\":\"enum ProofOfGood.ProofStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAgreements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalChallenges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserProfile\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"ensSubdomain\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalChallengesWon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalChallengesParticipated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWinnings\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFirstTime\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"followers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"follower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"followed\",\"type\":\"address\"}],\"name\":\"isFollowing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementId\",\"type\":\"uint256\"}],\"name\":\"joinAgreement\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"joinChallenge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"likeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"submitAgreementProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"submitProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userProfiles\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"ensSubdomain\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalChallengesWon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalChallengesParticipated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWinnings\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFirstTime\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"verifyAgreementProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"verifyProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCommunityFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProofOfGood.sol\":\"ProofOfGood\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a6b4f6b7798ab80929d491b89d5427a9b3338c0fd1acd0ba325f69c6f1646af\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\\n\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xbff9f59c84e5337689161ce7641c0ef8e872d6a7536fbc1f5133f128887aba3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x2d9dc2fe26180f74c11c13663647d38e259e45f95eb88f57b61d2160b0109d3e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/ProofOfGood.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract ProofOfGood is AccessControl, ReentrancyGuard {\\r\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n    bytes32 public constant VERIFIER_ROLE = keccak256(\\\"VERIFIER_ROLE\\\");\\r\\n    \\r\\n    uint256 private _challengeIds;\\r\\n    uint256 private _agreementIds;\\r\\n\\r\\n    enum ChallengeType { COMMUNITY, CUSTOM, COMMUNITY_SERVICE }\\r\\n    enum ChallengeStatus { ACTIVE, ENDED, CANCELLED }\\r\\n    enum ProofStatus { PENDING, VERIFIED, REJECTED }\\r\\n    enum ParticipantStatus { PARTICIPATING, WON, LOST, STAKE_RETURNED }\\r\\n\\r\\n    struct Challenge {\\r\\n        uint256 id;\\r\\n        string title;\\r\\n        string description;\\r\\n        string category;\\r\\n        address creator;\\r\\n        ChallengeType challengeType;\\r\\n        ChallengeStatus status;\\r\\n        uint256 stakeAmount;\\r\\n        uint256 deadline;\\r\\n        uint256 maxParticipants;\\r\\n        uint256 totalStaked;\\r\\n        uint256 participantCount;\\r\\n        address[] verifiers;\\r\\n        bool requiresFollow;\\r\\n        mapping(address => bool) allowedParticipants;\\r\\n        address[] participants;\\r\\n        mapping(address => ParticipantStatus) participantStatus;\\r\\n        mapping(address => string) proofs;\\r\\n        mapping(address => ProofStatus) proofStatus;\\r\\n        uint256 winnersCount;\\r\\n        uint256 rewardPerWinner;\\r\\n        bool rewardsDistributed;\\r\\n    }\\r\\n\\r\\n    struct Agreement {\\r\\n        uint256 id;\\r\\n        string title;\\r\\n        string description;\\r\\n        address creator;\\r\\n        uint256 stakeAmount;\\r\\n        uint256 deadline;\\r\\n        address[] parties;\\r\\n        address[] verifiers;\\r\\n        mapping(address => bool) hasStaked;\\r\\n        mapping(address => string) proofs;\\r\\n        mapping(address => ProofStatus) proofStatus;\\r\\n        mapping(address => bool) hasWon;\\r\\n        bool agreementEnded;\\r\\n        uint256 totalStaked;\\r\\n    }\\r\\n\\r\\n    struct UserProfile {\\r\\n        string ensSubdomain;\\r\\n        uint256 totalChallengesWon;\\r\\n        uint256 totalChallengesParticipated;\\r\\n        uint256 totalStaked;\\r\\n        uint256 totalWinnings;\\r\\n        bool isFirstTime;\\r\\n        mapping(address => bool) following;\\r\\n        address[] followers;\\r\\n    }\\r\\n\\r\\n    struct ChallengeComment {\\r\\n        address commenter;\\r\\n        string content;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Challenge) public challenges;\\r\\n    mapping(uint256 => Agreement) public agreements;\\r\\n    mapping(address => UserProfile) public userProfiles;\\r\\n    mapping(uint256 => mapping(address => bool)) public challengeLikes;\\r\\n    mapping(uint256 => uint256) public challengeLikesCount;\\r\\n    mapping(uint256 => ChallengeComment[]) public challengeComments;\\r\\n    mapping(string => address) public ensSubdomainToAddress;\\r\\n    mapping(address => string) public addressToEnsSubdomain;\\r\\n\\r\\n    uint256 public constant PLATFORM_FEE_PERCENTAGE = 5; // 5%\\r\\n    uint256 public constant COMMUNITY_FUND_PERCENTAGE = 10; // 10%\\r\\n    uint256 public communityFund;\\r\\n    address public platformOwner;\\r\\n\\r\\n    event ChallengeCreated(uint256 indexed challengeId, address indexed creator, ChallengeType challengeType);\\r\\n    event ChallengeJoined(uint256 indexed challengeId, address indexed participant);\\r\\n    event ProofSubmitted(uint256 indexed challengeId, address indexed participant, string proof);\\r\\n    event ProofVerified(uint256 indexed challengeId, address indexed participant, bool verified);\\r\\n    event ChallengeEnded(uint256 indexed challengeId);\\r\\n    event RewardsDistributed(uint256 indexed challengeId);\\r\\n    event AgreementCreated(uint256 indexed agreementId, address indexed creator);\\r\\n    event AgreementJoined(uint256 indexed agreementId, address indexed party);\\r\\n    event AgreementEnded(uint256 indexed agreementId);\\r\\n    event ENSSubdomainAssigned(address indexed user, string subdomain);\\r\\n    event UserFollowed(address indexed follower, address indexed followed);\\r\\n    event ChallengeLiked(uint256 indexed challengeId, address indexed liker);\\r\\n    event ChallengeCommented(uint256 indexed challengeId, address indexed commenter, string content);\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Not an admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyVerifier() {\\r\\n        require(hasRole(VERIFIER_ROLE, msg.sender), \\\"Not a verifier\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier challengeExists(uint256 challengeId) {\\r\\n        require(challengeId <= _challengeIds && challengeId > 0, \\\"Challenge does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier agreementExists(uint256 agreementId) {\\r\\n        require(agreementId <= _agreementIds && agreementId > 0, \\\"Agreement does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        platformOwner = msg.sender;\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _grantRole(ADMIN_ROLE, msg.sender);\\r\\n        _grantRole(VERIFIER_ROLE, msg.sender);\\r\\n    }\\r\\n\\r\\n    function createChallenge(\\r\\n        string memory title,\\r\\n        string memory description,\\r\\n        string memory category,\\r\\n        ChallengeType challengeType,\\r\\n        uint256 stakeAmount,\\r\\n        uint256 deadline,\\r\\n        uint256 maxParticipants,\\r\\n        address[] memory verifiers,\\r\\n        bool requiresFollow\\r\\n    ) external returns (uint256) {\\r\\n        require(deadline > block.timestamp, \\\"Deadline must be in the future\\\");\\r\\n        require(maxParticipants > 0, \\\"Max participants must be greater than 0\\\");\\r\\n        \\r\\n        if (challengeType == ChallengeType.CUSTOM) {\\r\\n            require(verifiers.length > 0, \\\"Custom challenges require verifiers\\\");\\r\\n        }\\r\\n\\r\\n        uint256 challengeId = ++_challengeIds;\\r\\n\\r\\n        Challenge storage newChallenge = challenges[challengeId];\\r\\n        newChallenge.id = challengeId;\\r\\n        newChallenge.title = title;\\r\\n        newChallenge.description = description;\\r\\n        newChallenge.category = category;\\r\\n        newChallenge.creator = msg.sender;\\r\\n        newChallenge.challengeType = challengeType;\\r\\n        newChallenge.status = ChallengeStatus.ACTIVE;\\r\\n        newChallenge.stakeAmount = stakeAmount;\\r\\n        newChallenge.deadline = deadline;\\r\\n        newChallenge.maxParticipants = maxParticipants;\\r\\n        newChallenge.verifiers = verifiers;\\r\\n        newChallenge.requiresFollow = requiresFollow;\\r\\n\\r\\n        emit ChallengeCreated(challengeId, msg.sender, challengeType);\\r\\n        return challengeId;\\r\\n    }\\r\\n\\r\\n    function joinChallenge(uint256 challengeId) external payable challengeExists(challengeId) nonReentrant {\\r\\n        Challenge storage challenge = challenges[challengeId];\\r\\n        \\r\\n        require(challenge.status == ChallengeStatus.ACTIVE, \\\"Challenge is not active\\\");\\r\\n        require(block.timestamp < challenge.deadline, \\\"Challenge deadline has passed\\\");\\r\\n        require(challenge.participantCount < challenge.maxParticipants, \\\"Challenge is full\\\");\\r\\n        require(challenge.participantStatus[msg.sender] == ParticipantStatus.PARTICIPATING || \\r\\n                challenge.participantStatus[msg.sender] == ParticipantStatus(0), \\\"Already participating\\\");\\r\\n\\r\\n        if (challenge.requiresFollow && challenge.challengeType == ChallengeType.CUSTOM) {\\r\\n            require(userProfiles[msg.sender].following[challenge.creator], \\\"Must be following creator\\\");\\r\\n        }\\r\\n\\r\\n        // Handle staking\\r\\n        if (challenge.challengeType != ChallengeType.COMMUNITY_SERVICE) {\\r\\n            if (userProfiles[msg.sender].isFirstTime) {\\r\\n                // First time users get free participation\\r\\n                userProfiles[msg.sender].isFirstTime = false;\\r\\n            } else {\\r\\n                require(msg.value == challenge.stakeAmount, \\\"Incorrect stake amount\\\");\\r\\n                challenge.totalStaked += msg.value;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        challenge.participants.push(msg.sender);\\r\\n        challenge.participantStatus[msg.sender] = ParticipantStatus.PARTICIPATING;\\r\\n        challenge.participantCount++;\\r\\n        userProfiles[msg.sender].totalChallengesParticipated++;\\r\\n\\r\\n        emit ChallengeJoined(challengeId, msg.sender);\\r\\n    }\\r\\n\\r\\n    function submitProof(uint256 challengeId, string memory proof) external challengeExists(challengeId) {\\r\\n        Challenge storage challenge = challenges[challengeId];\\r\\n        \\r\\n        require(challenge.status == ChallengeStatus.ACTIVE, \\\"Challenge is not active\\\");\\r\\n        require(challenge.participantStatus[msg.sender] == ParticipantStatus.PARTICIPATING, \\\"Not participating\\\");\\r\\n        require(block.timestamp <= challenge.deadline, \\\"Deadline has passed\\\");\\r\\n\\r\\n        challenge.proofs[msg.sender] = proof;\\r\\n        challenge.proofStatus[msg.sender] = ProofStatus.PENDING;\\r\\n\\r\\n        emit ProofSubmitted(challengeId, msg.sender, proof);\\r\\n    }\\r\\n\\r\\n    function verifyProof(uint256 challengeId, address participant, bool isValid) external challengeExists(challengeId) {\\r\\n        Challenge storage challenge = challenges[challengeId];\\r\\n        \\r\\n        require(block.timestamp > challenge.deadline, \\\"Challenge still active\\\");\\r\\n        require(challenge.proofStatus[participant] == ProofStatus.PENDING, \\\"Proof not pending\\\");\\r\\n        \\r\\n        // Check if sender is authorized verifier\\r\\n        bool isAuthorizedVerifier = false;\\r\\n        if (challenge.challengeType == ChallengeType.COMMUNITY || challenge.challengeType == ChallengeType.COMMUNITY_SERVICE) {\\r\\n            isAuthorizedVerifier = hasRole(VERIFIER_ROLE, msg.sender);\\r\\n        } else {\\r\\n            for (uint i = 0; i < challenge.verifiers.length; i++) {\\r\\n                if (challenge.verifiers[i] == msg.sender) {\\r\\n                    isAuthorizedVerifier = true;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        require(isAuthorizedVerifier, \\\"Not authorized to verify\\\");\\r\\n\\r\\n        challenge.proofStatus[participant] = isValid ? ProofStatus.VERIFIED : ProofStatus.REJECTED;\\r\\n        \\r\\n        if (!isValid) {\\r\\n            challenge.participantStatus[participant] = ParticipantStatus.LOST;\\r\\n        }\\r\\n\\r\\n        emit ProofVerified(challengeId, participant, isValid);\\r\\n    }\\r\\n\\r\\n    function endChallenge(uint256 challengeId) external challengeExists(challengeId) {\\r\\n        Challenge storage challenge = challenges[challengeId];\\r\\n        \\r\\n        require(block.timestamp > challenge.deadline, \\\"Challenge still active\\\");\\r\\n        require(challenge.status == ChallengeStatus.ACTIVE, \\\"Challenge already ended\\\");\\r\\n        require(!challenge.rewardsDistributed, \\\"Rewards already distributed\\\");\\r\\n\\r\\n        challenge.status = ChallengeStatus.ENDED;\\r\\n\\r\\n        // Count verified participants\\r\\n        address[] memory verifiedParticipants = new address[](challenge.participantCount);\\r\\n        uint256 verifiedCount = 0;\\r\\n\\r\\n        for (uint i = 0; i < challenge.participants.length; i++) {\\r\\n            address participant = challenge.participants[i];\\r\\n            if (challenge.proofStatus[participant] == ProofStatus.VERIFIED) {\\r\\n                verifiedParticipants[verifiedCount] = participant;\\r\\n                verifiedCount++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (verifiedCount > 0 && challenge.totalStaked > 0) {\\r\\n            _distributeRewards(challengeId, verifiedParticipants, verifiedCount);\\r\\n        }\\r\\n\\r\\n        emit ChallengeEnded(challengeId);\\r\\n    }\\r\\n\\r\\n    function _distributeRewards(uint256 challengeId, address[] memory verifiedParticipants, uint256 verifiedCount) internal {\\r\\n        Challenge storage challenge = challenges[challengeId];\\r\\n        \\r\\n        uint256 platformFee = (challenge.totalStaked * PLATFORM_FEE_PERCENTAGE) / 100;\\r\\n        uint256 communityFundAmount = (challenge.totalStaked * COMMUNITY_FUND_PERCENTAGE) / 100;\\r\\n        uint256 remainingPool = challenge.totalStaked - platformFee - communityFundAmount;\\r\\n\\r\\n        // Transfer platform fee\\r\\n        payable(platformOwner).transfer(platformFee);\\r\\n        communityFund += communityFundAmount;\\r\\n\\r\\n        // Randomly select winners (simplified random selection)\\r\\n        uint256 winnersToSelect = verifiedCount > 3 ? 3 : verifiedCount;\\r\\n        uint256 rewardPerWinner = remainingPool / winnersToSelect;\\r\\n\\r\\n        for (uint i = 0; i < winnersToSelect; i++) {\\r\\n            address winner = verifiedParticipants[i];\\r\\n            challenge.participantStatus[winner] = ParticipantStatus.WON;\\r\\n            userProfiles[winner].totalChallengesWon++;\\r\\n            userProfiles[winner].totalWinnings += rewardPerWinner;\\r\\n            payable(winner).transfer(rewardPerWinner);\\r\\n        }\\r\\n\\r\\n        // Return stakes to non-selected verified participants\\r\\n        for (uint i = winnersToSelect; i < verifiedCount; i++) {\\r\\n            address participant = verifiedParticipants[i];\\r\\n            challenge.participantStatus[participant] = ParticipantStatus.STAKE_RETURNED;\\r\\n            payable(participant).transfer(challenge.stakeAmount);\\r\\n        }\\r\\n\\r\\n        challenge.rewardsDistributed = true;\\r\\n        challenge.winnersCount = winnersToSelect;\\r\\n        challenge.rewardPerWinner = rewardPerWinner;\\r\\n\\r\\n        emit RewardsDistributed(challengeId);\\r\\n    }\\r\\n\\r\\n    function createAgreement(\\r\\n        string memory title,\\r\\n        string memory description,\\r\\n        uint256 stakeAmount,\\r\\n        uint256 deadline,\\r\\n        address[] memory parties,\\r\\n        address[] memory verifiers\\r\\n    ) external returns (uint256) {\\r\\n        require(deadline > block.timestamp, \\\"Deadline must be in the future\\\");\\r\\n        require(parties.length >= 2, \\\"Agreement requires at least 2 parties\\\");\\r\\n        require(verifiers.length > 0, \\\"Agreement requires verifiers\\\");\\r\\n\\r\\n        uint256 agreementId = ++_agreementIds;\\r\\n\\r\\n        Agreement storage newAgreement = agreements[agreementId];\\r\\n        newAgreement.id = agreementId;\\r\\n        newAgreement.title = title;\\r\\n        newAgreement.description = description;\\r\\n        newAgreement.creator = msg.sender;\\r\\n        newAgreement.stakeAmount = stakeAmount;\\r\\n        newAgreement.deadline = deadline;\\r\\n        newAgreement.parties = parties;\\r\\n        newAgreement.verifiers = verifiers;\\r\\n\\r\\n        emit AgreementCreated(agreementId, msg.sender);\\r\\n        return agreementId;\\r\\n    }\\r\\n\\r\\n    function joinAgreement(uint256 agreementId) external payable agreementExists(agreementId) nonReentrant {\\r\\n        Agreement storage agreement = agreements[agreementId];\\r\\n        \\r\\n        require(!agreement.agreementEnded, \\\"Agreement has ended\\\");\\r\\n        require(block.timestamp < agreement.deadline, \\\"Agreement deadline has passed\\\");\\r\\n        require(!agreement.hasStaked[msg.sender], \\\"Already staked\\\");\\r\\n        \\r\\n        // Check if sender is a party to the agreement\\r\\n        bool isParty = false;\\r\\n        for (uint i = 0; i < agreement.parties.length; i++) {\\r\\n            if (agreement.parties[i] == msg.sender) {\\r\\n                isParty = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(isParty, \\\"Not a party to this agreement\\\");\\r\\n\\r\\n        require(msg.value == agreement.stakeAmount, \\\"Incorrect stake amount\\\");\\r\\n        \\r\\n        agreement.hasStaked[msg.sender] = true;\\r\\n        agreement.totalStaked += msg.value;\\r\\n\\r\\n        emit AgreementJoined(agreementId, msg.sender);\\r\\n    }\\r\\n\\r\\n    function submitAgreementProof(uint256 agreementId, string memory proof) external agreementExists(agreementId) {\\r\\n        Agreement storage agreement = agreements[agreementId];\\r\\n        \\r\\n        require(!agreement.agreementEnded, \\\"Agreement has ended\\\");\\r\\n        require(agreement.hasStaked[msg.sender], \\\"Must stake first\\\");\\r\\n        require(block.timestamp <= agreement.deadline, \\\"Deadline has passed\\\");\\r\\n\\r\\n        agreement.proofs[msg.sender] = proof;\\r\\n        agreement.proofStatus[msg.sender] = ProofStatus.PENDING;\\r\\n    }\\r\\n\\r\\n    function verifyAgreementProof(uint256 agreementId, address party, bool isValid) external agreementExists(agreementId) {\\r\\n        Agreement storage agreement = agreements[agreementId];\\r\\n        \\r\\n        require(block.timestamp > agreement.deadline, \\\"Agreement still active\\\");\\r\\n        require(agreement.proofStatus[party] == ProofStatus.PENDING, \\\"Proof not pending\\\");\\r\\n        \\r\\n        // Check if sender is authorized verifier\\r\\n        bool isAuthorizedVerifier = false;\\r\\n        for (uint i = 0; i < agreement.verifiers.length; i++) {\\r\\n            if (agreement.verifiers[i] == msg.sender) {\\r\\n                isAuthorizedVerifier = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(isAuthorizedVerifier, \\\"Not authorized to verify\\\");\\r\\n\\r\\n        agreement.proofStatus[party] = isValid ? ProofStatus.VERIFIED : ProofStatus.REJECTED;\\r\\n        if (isValid) {\\r\\n            agreement.hasWon[party] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function endAgreement(uint256 agreementId) external agreementExists(agreementId) nonReentrant {\\r\\n        Agreement storage agreement = agreements[agreementId];\\r\\n        \\r\\n        require(block.timestamp > agreement.deadline, \\\"Agreement still active\\\");\\r\\n        require(!agreement.agreementEnded, \\\"Agreement already ended\\\");\\r\\n\\r\\n        agreement.agreementEnded = true;\\r\\n\\r\\n        // Count winners\\r\\n        uint256 winnersCount = 0;\\r\\n        for (uint i = 0; i < agreement.parties.length; i++) {\\r\\n            if (agreement.hasWon[agreement.parties[i]]) {\\r\\n                winnersCount++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (winnersCount == agreement.parties.length) {\\r\\n            // All parties fulfilled agreement, return stakes\\r\\n            for (uint i = 0; i < agreement.parties.length; i++) {\\r\\n                payable(agreement.parties[i]).transfer(agreement.stakeAmount);\\r\\n            }\\r\\n        } else if (winnersCount > 0) {\\r\\n            // Some parties fulfilled, winners split the pool\\r\\n            uint256 rewardPerWinner = agreement.totalStaked / winnersCount;\\r\\n            for (uint i = 0; i < agreement.parties.length; i++) {\\r\\n                if (agreement.hasWon[agreement.parties[i]]) {\\r\\n                    payable(agreement.parties[i]).transfer(rewardPerWinner);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit AgreementEnded(agreementId);\\r\\n    }\\r\\n\\r\\n    function assignENSSubdomain(address user, string memory subdomain) external onlyAdmin {\\r\\n        require(ensSubdomainToAddress[subdomain] == address(0), \\\"Subdomain already taken\\\");\\r\\n        require(bytes(addressToEnsSubdomain[user]).length == 0, \\\"User already has subdomain\\\");\\r\\n        \\r\\n        ensSubdomainToAddress[subdomain] = user;\\r\\n        addressToEnsSubdomain[user] = subdomain;\\r\\n        userProfiles[user].ensSubdomain = subdomain;\\r\\n        userProfiles[user].isFirstTime = true;\\r\\n\\r\\n        emit ENSSubdomainAssigned(user, subdomain);\\r\\n    }\\r\\n\\r\\n    function followUser(address userToFollow) external {\\r\\n        require(userToFollow != msg.sender, \\\"Cannot follow yourself\\\");\\r\\n        require(!userProfiles[msg.sender].following[userToFollow], \\\"Already following\\\");\\r\\n\\r\\n        userProfiles[msg.sender].following[userToFollow] = true;\\r\\n        userProfiles[userToFollow].followers.push(msg.sender);\\r\\n\\r\\n        emit UserFollowed(msg.sender, userToFollow);\\r\\n    }\\r\\n\\r\\n    function likeChallenge(uint256 challengeId) external challengeExists(challengeId) {\\r\\n        require(!challengeLikes[challengeId][msg.sender], \\\"Already liked\\\");\\r\\n        \\r\\n        challengeLikes[challengeId][msg.sender] = true;\\r\\n        challengeLikesCount[challengeId]++;\\r\\n\\r\\n        emit ChallengeLiked(challengeId, msg.sender);\\r\\n    }\\r\\n\\r\\n    function commentOnChallenge(uint256 challengeId, string memory content) external challengeExists(challengeId) {\\r\\n        require(bytes(content).length > 0, \\\"Comment cannot be empty\\\");\\r\\n        \\r\\n        challengeComments[challengeId].push(ChallengeComment({\\r\\n            commenter: msg.sender,\\r\\n            content: content,\\r\\n            timestamp: block.timestamp\\r\\n        }));\\r\\n\\r\\n        emit ChallengeCommented(challengeId, msg.sender, content);\\r\\n    }\\r\\n\\r\\n    function grantRole(bytes32 role, address account) public override onlyAdmin {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    function revokeRole(bytes32 role, address account) public override onlyAdmin {\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    // View functions\\r\\n    function getChallenge(uint256 challengeId) external view challengeExists(challengeId) returns (\\r\\n        uint256 id,\\r\\n        string memory title,\\r\\n        string memory description,\\r\\n        string memory category,\\r\\n        address creator,\\r\\n        ChallengeType challengeType,\\r\\n        ChallengeStatus status,\\r\\n        uint256 stakeAmount,\\r\\n        uint256 deadline,\\r\\n        uint256 maxParticipants,\\r\\n        uint256 totalStaked,\\r\\n        uint256 participantCount,\\r\\n        address[] memory verifiers,\\r\\n        bool requiresFollow,\\r\\n        uint256 winnersCount,\\r\\n        uint256 rewardPerWinner,\\r\\n        bool rewardsDistributed\\r\\n    ) {\\r\\n        Challenge storage challenge = challenges[challengeId];\\r\\n        return (\\r\\n            challenge.id,\\r\\n            challenge.title,\\r\\n            challenge.description,\\r\\n            challenge.category,\\r\\n            challenge.creator,\\r\\n            challenge.challengeType,\\r\\n            challenge.status,\\r\\n            challenge.stakeAmount,\\r\\n            challenge.deadline,\\r\\n            challenge.maxParticipants,\\r\\n            challenge.totalStaked,\\r\\n            challenge.participantCount,\\r\\n            challenge.verifiers,\\r\\n            challenge.requiresFollow,\\r\\n            challenge.winnersCount,\\r\\n            challenge.rewardPerWinner,\\r\\n            challenge.rewardsDistributed\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getChallengeParticipants(uint256 challengeId) external view challengeExists(challengeId) returns (address[] memory) {\\r\\n        return challenges[challengeId].participants;\\r\\n    }\\r\\n\\r\\n    function getChallengeComments(uint256 challengeId) external view challengeExists(challengeId) returns (ChallengeComment[] memory) {\\r\\n        return challengeComments[challengeId];\\r\\n    }\\r\\n\\r\\n    function getUserProfile(address user) external view returns (\\r\\n        string memory ensSubdomain,\\r\\n        uint256 totalChallengesWon,\\r\\n        uint256 totalChallengesParticipated,\\r\\n        uint256 totalStaked,\\r\\n        uint256 totalWinnings,\\r\\n        bool isFirstTime,\\r\\n        address[] memory followers\\r\\n    ) {\\r\\n        UserProfile storage profile = userProfiles[user];\\r\\n        return (\\r\\n            profile.ensSubdomain,\\r\\n            profile.totalChallengesWon,\\r\\n            profile.totalChallengesParticipated,\\r\\n            profile.totalStaked,\\r\\n            profile.totalWinnings,\\r\\n            profile.isFirstTime,\\r\\n            profile.followers\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getTotalChallenges() external view returns (uint256) {\\r\\n        return _challengeIds;\\r\\n    }\\r\\n\\r\\n    function getTotalAgreements() external view returns (uint256) {\\r\\n        return _agreementIds;\\r\\n    }\\r\\n\\r\\n    function isFollowing(address follower, address followed) external view returns (bool) {\\r\\n        return userProfiles[follower].following[followed];\\r\\n    }\\r\\n\\r\\n    function getParticipantStatus(uint256 challengeId, address participant) external view returns (ParticipantStatus) {\\r\\n        return challenges[challengeId].participantStatus[participant];\\r\\n    }\\r\\n\\r\\n    function getProofStatus(uint256 challengeId, address participant) external view returns (ProofStatus) {\\r\\n        return challenges[challengeId].proofStatus[participant];\\r\\n    }\\r\\n\\r\\n    function getProof(uint256 challengeId, address participant) external view returns (string memory) {\\r\\n        return challenges[challengeId].proofs[participant];\\r\\n    }\\r\\n\\r\\n    function withdrawCommunityFund(uint256 amount) external onlyAdmin nonReentrant {\\r\\n        require(amount <= communityFund, \\\"Insufficient community fund\\\");\\r\\n        communityFund -= amount;\\r\\n        payable(msg.sender).transfer(amount);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        communityFund += msg.value;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x81d10042452ff33bc948b1d732659fc2f5439ca0f2ece12f4f27a5d5e5ef5639\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27,
        "contract": "contracts/ProofOfGood.sol:ProofOfGood",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)22_storage)"
      },
      {
        "astId": 2610,
        "contract": "contracts/ProofOfGood.sol:ProofOfGood",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10467,
        "contract": "contracts/ProofOfGood.sol:ProofOfGood",
        "label": "_challengeIds",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 10469,
        "contract": "contracts/ProofOfGood.sol:ProofOfGood",
        "label": "_agreementIds",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 10617,
        "contract": "contracts/ProofOfGood.sol:ProofOfGood",
        "label": "challenges",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Challenge)10545_storage)"
      },
      {
        "astId": 10622,
        "contract": "contracts/ProofOfGood.sol:ProofOfGood",
        "label": "agreements",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Agreement)10585_storage)"
      },
      {
        "astId": 10627,
        "contract": "contracts/ProofOfGood.sol:ProofOfGood",
        "label": "userProfiles",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(UserProfile)10605_storage)"
      },
      {
        "astId": 10633,
        "contract": "contracts/ProofOfGood.sol:ProofOfGood",
        "label": "challengeLikes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 10637,
        "contract": "contracts/ProofOfGood.sol:ProofOfGood",
        "label": "challengeLikesCount",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10643,
        "contract": "contracts/ProofOfGood.sol:ProofOfGood",
        "label": "challengeComments",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_array(t_struct(ChallengeComment)10612_storage)dyn_storage)"
      },
      {
        "astId": 10647,
        "contract": "contracts/ProofOfGood.sol:ProofOfGood",
        "label": "ensSubdomainToAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 10651,
        "contract": "contracts/ProofOfGood.sol:ProofOfGood",
        "label": "addressToEnsSubdomain",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 10659,
        "contract": "contracts/ProofOfGood.sol:ProofOfGood",
        "label": "communityFund",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 10661,
        "contract": "contracts/ProofOfGood.sol:ProofOfGood",
        "label": "platformOwner",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ChallengeComment)10612_storage)dyn_storage": {
        "base": "t_struct(ChallengeComment)10612_storage",
        "encoding": "dynamic_array",
        "label": "struct ProofOfGood.ChallengeComment[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ChallengeStatus)10477": {
        "encoding": "inplace",
        "label": "enum ProofOfGood.ChallengeStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ChallengeType)10473": {
        "encoding": "inplace",
        "label": "enum ProofOfGood.ChallengeType",
        "numberOfBytes": "1"
      },
      "t_enum(ParticipantStatus)10486": {
        "encoding": "inplace",
        "label": "enum ProofOfGood.ParticipantStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ProofStatus)10481": {
        "encoding": "inplace",
        "label": "enum ProofOfGood.ProofStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(ParticipantStatus)10486)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum ProofOfGood.ParticipantStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(ParticipantStatus)10486"
      },
      "t_mapping(t_address,t_enum(ProofStatus)10481)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum ProofOfGood.ProofStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(ProofStatus)10481"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_struct(UserProfile)10605_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ProofOfGood.UserProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(UserProfile)10605_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)22_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)22_storage"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(ChallengeComment)10612_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ProofOfGood.ChallengeComment[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(ChallengeComment)10612_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Agreement)10585_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ProofOfGood.Agreement)",
        "numberOfBytes": "32",
        "value": "t_struct(Agreement)10585_storage"
      },
      "t_mapping(t_uint256,t_struct(Challenge)10545_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ProofOfGood.Challenge)",
        "numberOfBytes": "32",
        "value": "t_struct(Challenge)10545_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Agreement)10585_storage": {
        "encoding": "inplace",
        "label": "struct ProofOfGood.Agreement",
        "members": [
          {
            "astId": 10547,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10549,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 10551,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 10553,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "creator",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 10555,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "stakeAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10557,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "deadline",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10560,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "parties",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 10563,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "verifiers",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 10567,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "hasStaked",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 10571,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "proofs",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_string_storage)"
          },
          {
            "astId": 10576,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "proofStatus",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_enum(ProofStatus)10481)"
          },
          {
            "astId": 10580,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "hasWon",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 10582,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "agreementEnded",
            "offset": 0,
            "slot": "12",
            "type": "t_bool"
          },
          {
            "astId": 10584,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "totalStaked",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(Challenge)10545_storage": {
        "encoding": "inplace",
        "label": "struct ProofOfGood.Challenge",
        "members": [
          {
            "astId": 10488,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10490,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 10492,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 10494,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "category",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 10496,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "creator",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 10499,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "challengeType",
            "offset": 20,
            "slot": "4",
            "type": "t_enum(ChallengeType)10473"
          },
          {
            "astId": 10502,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "status",
            "offset": 21,
            "slot": "4",
            "type": "t_enum(ChallengeStatus)10477"
          },
          {
            "astId": 10504,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "stakeAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10506,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "deadline",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 10508,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "maxParticipants",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 10510,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "totalStaked",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 10512,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "participantCount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 10515,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "verifiers",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 10517,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "requiresFollow",
            "offset": 0,
            "slot": "11",
            "type": "t_bool"
          },
          {
            "astId": 10521,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "allowedParticipants",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 10524,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "participants",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 10529,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "participantStatus",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_enum(ParticipantStatus)10486)"
          },
          {
            "astId": 10533,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "proofs",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_string_storage)"
          },
          {
            "astId": 10538,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "proofStatus",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_enum(ProofStatus)10481)"
          },
          {
            "astId": 10540,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "winnersCount",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          },
          {
            "astId": 10542,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "rewardPerWinner",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256"
          },
          {
            "astId": 10544,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "rewardsDistributed",
            "offset": 0,
            "slot": "19",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "640"
      },
      "t_struct(ChallengeComment)10612_storage": {
        "encoding": "inplace",
        "label": "struct ProofOfGood.ChallengeComment",
        "members": [
          {
            "astId": 10607,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "commenter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10609,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "content",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 10611,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)22_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 19,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserProfile)10605_storage": {
        "encoding": "inplace",
        "label": "struct ProofOfGood.UserProfile",
        "members": [
          {
            "astId": 10587,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "ensSubdomain",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 10589,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "totalChallengesWon",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10591,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "totalChallengesParticipated",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10593,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "totalStaked",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10595,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "totalWinnings",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10597,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "isFirstTime",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 10601,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "following",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 10604,
            "contract": "contracts/ProofOfGood.sol:ProofOfGood",
            "label": "followers",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}